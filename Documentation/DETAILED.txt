Есть следующие программы:
*демон RadControl
*сервер Tango-устройств RadCtrl
*мнемосхема comp-map
+программы Tango-Controls
+архивная база данных на mysql
Исходный код написанных программ лежит в /home/ivan/Programs/RadControl

Написанные компоненты взаимодействуют друг с другом при помощи файла разделяемой памяти и очереди сообщений.
Поскольку он находится в директории tmp, файл не переживает перезагрузку системы.
Очередь сообщений называется "/RadControl"

Общение с датчиками идёт по протоколу modbus. Для того, чтобы процессы не мешали друг другу при общении с детекторами, связью занимается только один процесс - демон RadControl. Он опрашивает датчики, получает от них счёт, преобразует счёт в мощность дозы с учётом калибровки и записывает это в файл разделяемой памяти. Tango-сервер открывает файл разделяемой памяти и, по получении запроса на показания датчика, считывает их из этого файла. Мнемосхема раз в секунду запрашивает показания датчиков через Tango и рисует их. Tango-сервер может принимать запросы на изменение экспозиции. Это запросы заносятся в очередь сообщений, оттуда их забирает и исполняет демон.

Файл разделяемой памяти
Файл разделяёмой памяти создаётся демоном RadControl при запуске. Путь к нему
/tmp/radcontrol. Демон же поддерживает актуальность данных в этом файле.
Данные в файле хранятся в бинарном формате. Файл имеет следующую структуру:
1. Байт с битами состояния демона. Используются последние два бита.
Выставленный бит 0b00000001 означает, что демон работает, опущенный означает, что он был остановлен.
Выставленный бит 0b00000010 должен бы означать, что по каким-то причином демон не может писать показания в базу данных. Эта проверка не реализована и пока этот бит всегда 0.
2. Байт с полным числом детекторов
3. Массив структур с данными для каждого детектора. Эта структура - D - описана в файле
**Тип - гамма, нейтронный или неизвестный
**Состояние (см.ниже)
**modbus-адрес
**счёт (последнее измерение)
**экспозиция
**экспозиция по счёту (для гамма здесь стоит 0)
**чувствительность (для гамма здесь стоит 0)
Эти структуры описаны в файле DetectorData.h
Структура файла разделяемой памяти такова:
Слева указан сдвиг (offset) в байтах от начала файла:
0	Байт состояния
1	Байт числа детекторов
2+i*sizeof(DetectorData)	Данные для i-го детектора
Тип детектора указывается в переменной "type" типа "enum class DetectorType". Тип может принимать значения:
*DetectorType::UNKNOWN_TYPE - неизвестный тип.
*DetectorType::GAMMA
*DetectorType::NEUTRON
Состояние детектора указано в переменной "state" типа "enum class DetectorState". Состояние может принимать значения:
*DetectorState::OK
*DetectorState::DISABLED - датчик отключён
*DetectorState::INIT - датчик работает, но не закончил первое измерение, и указанные пока значения не являются действительными
*DetectorState::NO_CONNECTION - связь с датчиком потеряна
*DetectorState::NO_CALIBRATION - датчик работает, но не удалось найти для него файл с калибровочными данными, поэтому указанный фон является недействительным
*DetectorState::UNKNOWN 
Указанные в файле разделяемой памяти показания следует считать действительными, только если детектор находится в состоянии OK, в состоянии NO_CALIBRATION правильными являются все указанные параметры, кроме фона.
